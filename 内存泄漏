## 内存泄漏 ##
内存泄漏是指一个不再被程序使用的对象或变量还在内存中占有存储空间。
内存泄漏的情况有：

* 在堆中申请的空间没有被释放【这种情况可以由垃圾回收机制有效处理，所以Java中的内存泄漏主要指第二种情况】；
* 对象已不再使用，但还仍然在内存中保留着。

        Vector v=new Vector();
	    for(int i=0;i<10;i++){
	    	Object o=new Object();
	    	v.add(o);
		}
    在这个例子中，不断创建新的对象加入到Vector中，当退出循环后，o的作用域将会结束，但是由于v还在使用这些对象，所以垃圾回收器无法将其回收，从而导致内存泄漏。
java可能会发生内存泄漏的情况：

* 静态集合类，例如HashMap和Vector。如果这些容器是静态的，由于他们生命周期与程序一致，所以容器中的对象在程序结束之前将不能被释放。
* 各种连接，如数据库连接，网络连接，IO连接等等，在数据库操作过程中，先要建立数据库连接，当不再使用时，需要调用close来释放与数据库的连接，只有连接关闭后，垃圾回收器才会回收相应的对象。否则，如果不显示的关闭connection、statement、resultset，将会造成大量的对象无法回收，从而引起内存泄漏。
* 监听器：在一个应用中使用监听器时，在释放对象的时候并没有相应的删除监听器，从而导致内存泄漏。
* 变量作用域不合理。如果一个变量的作用域大于其使用范围，很有可能造成内存泄漏，如果没及时的把对象设为null，很可能导致内存泄漏。
* 单例模式也可能造成内存泄漏。因为单例模式的对象以静态变量的方式存储，所以在JVM的整个生命周期中都存在。
